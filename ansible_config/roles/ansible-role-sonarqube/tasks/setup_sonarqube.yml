---

- name: "Ensure SonarQube binary exists"
  stat:
    path: "{{ sonar_daemon_dir }}/sonar.sh"
  register: sonar_binary_stat

- block:
  - name: "Download SonarQube binaries"
    get_url:
      url: "{{ sonar_download_url }}"
      dest: "/tmp/{{ __sonar_archive }}"
    retries: 5
    delay: 10

  - name: install unzip
    apt: 
      name: unzip
      state: present

  - name: "Expand SonarQube binaries"
    unarchive:
      src: "/tmp/{{ __sonar_archive }}"
      dest: "{{ sonar_install_directory }}"
      owner: "{{ sonar_user }}"
      group: "{{ sonar_group }}"
      copy: no

  - name: "Remove SonarQube archive"
    file:
      path: "/tmp/{{ __sonar_archive }}"
      state: absent

  when: not sonar_binary_stat.stat.exists

- name: "Ensure SonarQube as init script for service management"
  file:
    src: "{{ sonar_daemon_dir }}/sonar.sh"
    dest: /etc/init.d/sonar
    state: link
  when: "ansible_service_mgr != 'systemd'"

- name: "Copy SonarQube systemd unit file into place (for systemd systems)."
  template:
    src: sonar.service.j2
    dest: /etc/systemd/system/sonar.service
    owner: root
    group: root
    mode: 0755
  when: "ansible_service_mgr == 'systemd'"


- name: "Ensure SonarQube files permissions"
  file:
    path: "{{ sonar_install_directory }}"
    state: directory
    recurse: yes
    owner: "{{ sonar_user }}"
    group: "{{ sonar_group }}"
    mode: "go-w"

- name: "Ensure SonarQube configuration"
  template:
    src: "sonar.properties.j2"
    dest: "{{ sonar_conf_dir }}/sonar.properties"
    owner: "{{ sonar_user }}"
    group: "{{ sonar_group }}"
    mode: "u=rw,g=,o="
  no_log: false
  notify:
      - "restart SonarQube service"

- name: "Ensure SonarQube is running and set to start on boot."
  service:
    name: sonar
    state: started
    enabled: yes


# Install posgtresql on remote server

- name:  install ansible postgresql dependancy packages
  package:
    pkg: python3-psycopg2
    state: present

- name: add the virtual max memory
  lineinfile:
    path: /etc/sysctl.conf
    state: present
    line: "{{ item }}"
  with_items:
  - 'vm.max_map_count=262144'
  - 'fs.file-max=65536'
  - 'ulimit -n 65536'
  - 'ulimit -u 4096'

- name: Ensure bash, OpenSSl, and libssl are the latest versions
  apt:
    name: "{{item}}"
    update_cache: true 
    state: latest
  with_items: 
      - bash
      - openssl
      - libssl-dev
      - libssl-doc
    
- name: Install PostgreSQL
  apt: 
    name: "{{item}}"
    state: present
    update_cache: true 
  with_items:
        - postgresql
        - postgresql-contrib
        - libpq-dev
  notify:
      - Start PostgreSQL service

- name: Ensure database is created
  postgresql_db: 
      name: sonar_db
      state: present
  become: yes
  become_user: postgres

- name: Ensure user has access to the database
  postgresql_user: 
      db: sonar_db
      name: "{{ sonar_db_user }}"
      password: "{{ sonar_db_pass }}"
      priv: ALL
      state: present
      encrypted: yes
  become: yes
  become_user: postgres

- name: Ensure user does not have unnecessary privileges
  postgresql_user: 
      name: "{{ sonar_db_user }}"
      role_attr_flags: NOSUPERUSER,NOCREATEDB
      state: present
  become: yes
  become_user: postgres


